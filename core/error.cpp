#include "error.h"
#include "string_utils.h"
#include <string.h>

namespace {
constexpr const char* get_errno_name(const int a_eno)
{
    #define CASE_ENUM(ENUM) a_eno == ENUM ? #ENUM :
    return
        CASE_ENUM( 0               )
        CASE_ENUM( EPERM           )
        CASE_ENUM( ENOENT          )
        CASE_ENUM( ESRCH           )
        CASE_ENUM( EINTR           )
        CASE_ENUM( EIO             )
        CASE_ENUM( ENXIO           )
        CASE_ENUM( E2BIG           )
        CASE_ENUM( ENOEXEC         )
        CASE_ENUM( EBADF           )
        CASE_ENUM( ECHILD          )
        CASE_ENUM( EAGAIN          )
        CASE_ENUM( ENOMEM          )
        CASE_ENUM( EACCES          )
        CASE_ENUM( EFAULT          )
        CASE_ENUM( ENOTBLK         )
        CASE_ENUM( EBUSY           )
        CASE_ENUM( EEXIST          )
        CASE_ENUM( EXDEV           )
        CASE_ENUM( ENODEV          )
        CASE_ENUM( ENOTDIR         )
        CASE_ENUM( EISDIR          )
        CASE_ENUM( EINVAL          )
        CASE_ENUM( ENFILE          )
        CASE_ENUM( EMFILE          )
        CASE_ENUM( ENOTTY          )
        CASE_ENUM( ETXTBSY         )
        CASE_ENUM( EFBIG           )
        CASE_ENUM( ENOSPC          )
        CASE_ENUM( ESPIPE          )
        CASE_ENUM( EROFS           )
        CASE_ENUM( EMLINK          )
        CASE_ENUM( EPIPE           )
        CASE_ENUM( EDOM            )
        CASE_ENUM( ERANGE          )
        CASE_ENUM( EDEADLK         )
        CASE_ENUM( ENAMETOOLONG    )
        CASE_ENUM( ENOLCK          )
        CASE_ENUM( ENOSYS          )
        CASE_ENUM( ENOTEMPTY       )
        CASE_ENUM( ELOOP           )
        CASE_ENUM( EWOULDBLOCK     )
        CASE_ENUM( ENOMSG          )
        CASE_ENUM( EIDRM           )
        CASE_ENUM( ECHRNG          )
        CASE_ENUM( EL2NSYNC        )
        CASE_ENUM( EL3HLT          )
        CASE_ENUM( EL3RST          )
        CASE_ENUM( ELNRNG          )
        CASE_ENUM( EUNATCH         )
        CASE_ENUM( ENOCSI          )
        CASE_ENUM( EL2HLT          )
        CASE_ENUM( EBADE           )
        CASE_ENUM( EBADR           )
        CASE_ENUM( EXFULL          )
        CASE_ENUM( ENOANO          )
        CASE_ENUM( EBADRQC         )
        CASE_ENUM( EBADSLT         )
        CASE_ENUM( EBFONT          )
        CASE_ENUM( ENOSTR          )
        CASE_ENUM( ENODATA         )
        CASE_ENUM( ETIME           )
        CASE_ENUM( ENOSR           )
        CASE_ENUM( ENONET          )
        CASE_ENUM( ENOPKG          )
        CASE_ENUM( EREMOTE         )
        CASE_ENUM( ENOLINK         )
        CASE_ENUM( EADV            )
        CASE_ENUM( ESRMNT          )
        CASE_ENUM( ECOMM           )
        CASE_ENUM( EPROTO          )
        CASE_ENUM( EMULTIHOP       )
        CASE_ENUM( EDOTDOT         )
        CASE_ENUM( EBADMSG         )
        CASE_ENUM( EOVERFLOW       )
        CASE_ENUM( ENOTUNIQ        )
        CASE_ENUM( EBADFD          )
        CASE_ENUM( EREMCHG         )
        CASE_ENUM( ELIBACC         )
        CASE_ENUM( ELIBBAD         )
        CASE_ENUM( ELIBSCN         )
        CASE_ENUM( ELIBMAX         )
        CASE_ENUM( ELIBEXEC        )
        CASE_ENUM( EILSEQ          )
        CASE_ENUM( ERESTART        )
        CASE_ENUM( ESTRPIPE        )
        CASE_ENUM( EUSERS          )
        CASE_ENUM( ENOTSOCK        )
        CASE_ENUM( EDESTADDRREQ    )
        CASE_ENUM( EMSGSIZE        )
        CASE_ENUM( EPROTOTYPE      )
        CASE_ENUM( ENOPROTOOPT     )
        CASE_ENUM( EPROTONOSUPPORT )
        CASE_ENUM( ESOCKTNOSUPPORT )
        CASE_ENUM( EOPNOTSUPP      )
        CASE_ENUM( EPFNOSUPPORT    )
        CASE_ENUM( EAFNOSUPPORT    )
        CASE_ENUM( EADDRINUSE      )
        CASE_ENUM( EADDRNOTAVAIL   )
        CASE_ENUM( ENETDOWN        )
        CASE_ENUM( ENETUNREACH     )
        CASE_ENUM( ENETRESET       )
        CASE_ENUM( ECONNABORTED    )
        CASE_ENUM( ECONNRESET      )
        CASE_ENUM( ENOBUFS         )
        CASE_ENUM( EISCONN         )
        CASE_ENUM( ENOTCONN        )
        CASE_ENUM( ESHUTDOWN       )
        CASE_ENUM( ETOOMANYREFS    )
        CASE_ENUM( ETIMEDOUT       )
        CASE_ENUM( ECONNREFUSED    )
        CASE_ENUM( EHOSTDOWN       )
        CASE_ENUM( EHOSTUNREACH    )
        CASE_ENUM( EALREADY        )
        CASE_ENUM( EINPROGRESS     )
        CASE_ENUM( ESTALE          )
        CASE_ENUM( EUCLEAN         )
        CASE_ENUM( ENOTNAM         )
        CASE_ENUM( ENAVAIL         )
        CASE_ENUM( EISNAM          )
        CASE_ENUM( EREMOTEIO       )
        CASE_ENUM( EDQUOT          )
        CASE_ENUM( ENOMEDIUM       )
        CASE_ENUM( EMEDIUMTYPE     )
        CASE_ENUM( ECANCELED       )
        CASE_ENUM( ENOKEY          )
        CASE_ENUM( EKEYEXPIRED     )
        CASE_ENUM( EKEYREVOKED     )
        CASE_ENUM( EKEYREJECTED    )
        CASE_ENUM( EOWNERDEAD      )
        CASE_ENUM( ENOTRECOVERABLE )
        CASE_ENUM( ERFKILL         )
        CASE_ENUM( EHWPOISON       )
        "Unknown_errno";
    #undef  CASE_ENUM
}
} // namespace anon

std::string pretty_errno(int const eno)
{
    if(0 == eno)
        return std::string();
    std::stringstream ss;
    ss << "ERRNO = " << eno << " (" << get_errno_name(eno) << ": " << strerror(eno) << ")";
    return ss.str();
}

std::string format_error(const char* file, int line, const char* func, int eno, const char* fmt, ...)
{
    va_list vl;
    va_start(vl, fmt);
    const std::string msg = format_string_v(fmt, vl);
    va_end(vl);
    const std::string res = format_string("%s:%d - ", file, line) + msg + " " + pretty_errno(eno);
    return res;
}
